package net.sumppen.whatsapi4j;

import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sumppen.whatsapi4j.tools.BinHex;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.junit.Test;

public class WhatsApi4jTest {

	private final Logger log = LoggerFactory.getLogger(WhatsApi4jTest.class);
	@Test
	public void testPbkdf2() throws Exception {
        WhatsApi whatsapi = new WhatsApi("12345678", "", "test");
        byte[] key = whatsapi.pbkdf2("PBKDF2WithHmacSHA1", "test".getBytes(), "1234".getBytes(), 16, 20, false);
        log.debug(new String(key));
        assertTrue("35e3945d26a46d5cb76e986e4ac305b857b9a56b".equals(new String(key)));
	}
	
//	@Test
//	public void testKeyStream() throws Exception {
//		String key = "key";
//		KeyStream in = new KeyStream(key.getBytes());
//		KeyStream out = new KeyStream(key.getBytes());
//		String data = "foo";
//		byte[] encoded = in.encode(data.getBytes(), 0, data.length(),false);
//		log.debug(WhatsApi.toHex(encoded));
//		byte[] decoded = out.decode(encoded, 0, encoded.length);
//		log.debug(new String(decoded));
//		assertTrue(data.equals(new String(decoded)));
//	}
	
	@Test
	public void testGenerateKeys() throws Exception {
		String challenge = "73b82585b1a15cf3687501355ea2ba3f5e0cfe9c";
        WhatsApi whatsapi = new WhatsApi("12345678", "", "test");
        whatsapi.setChallengeData(challenge);
        whatsapi.setPassword("nb97ZaxkMrX5nNDuEb8H2o4SBJI=");
        List<byte[]> keys = whatsapi.generateKeys();
        assertEquals("251c1d9325bfd34025e6e2efb27e0df8fc334262", BinHex.bin2hex(keys.get(0)));
        assertEquals("bde430475e6bf63966b4d3baf39f4143fbddb3a2", BinHex.bin2hex(keys.get(1)));
        assertEquals("282469087550e82e04ccdc6d41a10842a731621f", BinHex.bin2hex(keys.get(2)));
        assertEquals("631f85abed3f057098ee89a4d6b335d8ec53a9d0", BinHex.bin2hex(keys.get(3)));
	}
	
	@Test
	public void testHashHMAC() throws Exception {
		KeyStream ks = new KeyStream(BinHex.hex2bin("57228438fcf09b18c8ad28428d39a7c9ae8fa36c"), BinHex.hex2bin("691760f81e2d40e71b6888f6b9210f3207073e60"));
		byte[] data = BinHex.hex2bin("000b6da46516831d0dd2eb4a1f1ca053939a4640c150bb3cb7a6c7ad14cd");
		byte[] res = ks.computeMac(data, 0, data.length);
		assertEquals("78f016fc1e8331b24434dfe8a177e82a0ee69175", BinHex.bin2hex(res));
	}
	
	@Test
	public void testChallengeResponse() throws Exception {
		String challenge = "b32e685dd1b680dd01fa5e23cd37a25f59c0953b";
        WhatsApi whatsapi = new WhatsApi("6583206450", "", "test");
        whatsapi.setChallengeData(challenge);
        whatsapi.setPassword("nb97ZaxkMrX5nNDuEb8H2o4SBJI=");
        byte[] resp = whatsapi.authenticate();
        assertEquals("4a2702c33c66deed719791724635de98f63fbca4ee859288b01b367703a71cb1dcf6", BinHex.bin2hex(resp));
	}
	
	@Test
	public void testChallengeResponse2() throws Exception {
		String challenge = "2fee792594a69d1790163b46e7b9fcd7a25d3766";
        WhatsApi whatsapi = new WhatsApi("6583206450", "", "test");
        whatsapi.setChallengeData(challenge);
        whatsapi.setPassword("nb97ZaxkMrX5nNDuEb8H2o4SBJI=");
        byte[] resp = whatsapi.authenticate();
        assertEquals("5c3babbbcad22dd3505c1cd7f04c488dd34b4f33c8aba6bb83ce1976e5a5aba43bae", BinHex.bin2hex(resp));
	}
	
	@Test
	public void testBase64Decode() throws Exception {
		String password = "+pRhR5WH/tt4pNG5uO+rkNqRPh4=";
        WhatsApi whatsapi = new WhatsApi("12345678", "", "test");
        byte[] resp = whatsapi.base64_decode(password);
        String str = WhatsApi.toHex(resp);
        log.debug(str);
        assertTrue(str.equals("fa9461479587fedb78a4d1b9b8efab90da913e1e"));
	}

	@Test
	public void testReadCountries() throws Exception {
        WhatsApi whatsapi = new WhatsApi("12345678", "", "test");
        List<Country> countries = whatsapi.getCountries();
        for(Country country : countries) {
        	log.debug(country.toString());
        }
        assertEquals(254,countries.size());
	}
	
	@Test
	public void testGenerateRequestToken() throws Exception {
        WhatsApi whatsapi = new WhatsApi("12345678", "", "test");
        String token = whatsapi.generateRequestToken("Finland", "401122333");
//        assertEquals("vMg5esCVsZdT2auKeWtoYLWEcCY=", token);
        assertEquals("c18f993c24121c83e84aafb8a687117e", token);
	}

	@Test
	public void testCheckIdentity() throws Exception {
        WhatsApi whatsapi = new WhatsApi("12345678", "", "test");
        assertFalse(whatsapi.checkIdentity("e807f1fcf82d132f9bb018ca6738a19f"));
        String id = whatsapi.buildIdentity("e807f1fcf82d132f9bb018ca6738a19f");
        assertTrue(whatsapi.checkIdentity(id));
        assertEquals("%b1%02%ce%1d%5e%eb%ac%2bmt%bd%a8%c8%7cg%a0p%c8%04%91",id);
	}
	
	@Test
	public void testDecodeData() throws Exception {
		String challenge = "59ea12d664fb4aa4848c55ffa7ded07d65217450";
        WhatsApi whatsapi = new WhatsApi("123456789", "", "test");
        whatsapi.setChallengeData(challenge);
        whatsapi.setPassword("nb97ZaxkMrX5nNDuEb8H2o4SBJI=");
        byte[] resp = whatsapi.authenticate();
        KeyStream key = whatsapi.getInputKey();
		String buffer = "2db11e924b22cd0a762a9903c9302fbd7d4fd0c8a98e276736c0f2c951202db5290e23159f423cdad8fbe954e1fa4015338a008b7b3c3c7ef67188da47";
		byte[] b = BinHex.hex2bin(buffer);
		byte[] d = key.decode(b, b.length-4, 0, b.length-4);
		String decoded = "f80e9fa1ff0514241837137cfc013451399a061fff0514235394222eff051455075422fc147edf37f0a8d519c041e476d97d1349e861509ddc7188da47";
		assertEquals(decoded, BinHex.bin2hex(d));
	}

	@Test
	public void testEncryptedReader() throws Exception {
		String challenge = "197f119ef43d25a6b38a09dff59329a9548b5475";
        WhatsApi whatsapi = new WhatsApi("123456789", "", "test");
        whatsapi.setChallengeData(challenge);
        whatsapi.setPassword("nb97ZaxkMrX5nNDuEb8H2o4SBJI=");
        whatsapi.authenticate();
        KeyStream key = whatsapi.getInputKey();
        BinTreeNodeReader reader = new BinTreeNodeReader();
        reader.setKey(key);
		String buffer = "80003db8479ddd1e84163b29871735d6bfe4297e71db35185b40f40bbe581770e10947f7f31b0a8df357abaac289e21152b9e8db209936ca2dd4d3bcbcba0d60";
		byte[] b = BinHex.hex2bin(buffer);
		ProtocolNode node = reader.nextTree(b);
		log.debug(node.toString());
		assertEquals("active", node.getAttribute("status"));
		assertEquals("1424242627", node.getAttribute("t"));
		assertEquals("4", node.getAttribute("props"));
		assertEquals("free", node.getAttribute("kind"));
		assertEquals("1423539422", node.getAttribute("creation"));
	}
	
	@Test
	public void testEncryptedWriter() throws Exception {
		String challenge = "17a92a95be51f28b8eb5832f31b974207b22ff60";
        WhatsApi whatsapi = new WhatsApi("123456789", "", "test");
        whatsapi.setChallengeData(challenge);
        whatsapi.setPassword("nb97ZaxkMrX5nNDuEb8H2o4SBJI=");
        whatsapi.authenticate();
        KeyStream key = whatsapi.getOutputKey();
        BinTreeNodeWriter writer = new BinTreeNodeWriter();
        writer.setKey(key);
        Map<String, String> attributes = new HashMap<String, String>();
        attributes.put("name", "Test Account");
		ProtocolNode node = new ProtocolNode("presence", attributes, null, null);
        byte[] data = writer.write(node, true);
        assertEquals("80001622ef2300f48212f0b22cc1503e6f10493558c79ef30d", BinHex.bin2hex(data));
	}

	@Test
	public void testParseLocation() throws Exception {
		String locationMessage = "000945f80c593afaff063584077181089144ff071424659087a359a757a1ff05142486350366fc0c4b696d204c696e6462657267f801f80a57a7ec42ec44fc0732342e36393935ec3efc0736302e313637342b7efd0008ecffd8ffe000104a46494600010100004800480000ffe100584578696600004d4d002a000000080002011200030000000100010000876900040000000100000026000000000003a00100030000000100010000a00200040000000100000064a0030004000000010000006400000000ffed003850686f746f73686f7020332e30003842494d04040000000000003842494d0425000000000010d41d8cd98f00b204e9800998ecf8427effc00011080064006403012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffdb0043000606060606060a06060a0e0a0a0a0e120e0e0e0e12171212121212171c1717171717171c1c1c1c1c1c1c1c22222222222227272727272c2c2c2c2c2c2c2c2c2cffdb0043010707070b0a0b130a0a132e1f1a1f2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2effdd00040007ffda000c03010002110311003f00fa728aa88cd03ac321dc8dfeadfaff00c04fbfa1eff5eb6eb9a9d4535746b28d828a28ab2428e9cd1450073b736d369db25b69084893626f1bf6824111a2ae0b16200c92481ef935b1697715da128ca5d30b22ab06d8d8e5491e9561d564468dbeeb020f24707dc73581710cb67705a319474f2d427c9f28ce235c1f902fde6909fa0aadc5b1d0d359822966e82aa595f437b6ff00688dc32e5b9c6dc81df04938c11cf7ebd08a7e5a57e38c723fd91ebf53dbd3ad2b0c00695ce78ec7d87a0f7f53f855900018142a8501578029690051451401ffd0fa38c6a87ecafc4527dc3fdd6eb81fcc54d048cc0c72ff00ac4e1bdfd08f63524b1aca8636efdc7507b11f4aa86460be7b0ccb0fcb263baf5c8fe63f115e6497b19dd6dfd7e5d3e6752f7d58bf452020804720d2d769885735e27d69b46b38cc25566b890468cff7533d58fb0ae96b97f15e82faf69c2180859a26de99e87b107eb59d6e6e47c9b9d997fb1fac43eb1f0df53ccee7c49ae68bac48835017c8a4648398d8119c01dbd38af63826b6d5f4c49987ee6e630483e8c3a5784dbf84f5996e9ada58bca11902466230b9e9d3ae7b62bd8ad2682c6da1b289be58142027b63bfbb1fc8572e0fda5e4e5b1ef711fd51429aa0d39f56adb79db422818ff006834d0a3dc4ae184b228f949dc3cb5cbed51b54648eb9c75e6ba78c285f90e41efdc9f7aad0cd14c9b07229ff346fea4ff00e3deff00ef0fd6bd06ee7ca1668a404300ca720d2d48051451401fffd1fa72aacdfb9916e7f87eebff00ba7a1fc0fe99ab5514dfea9bbf1839f4ae6a90e68d8d62ecc8a0fdcbb5a9e8bf327fba7b7e078fcaad56647e634217acb6fcaffb4bd31f8f4fa8ad0475910488721864563869e9c8fa7f5f81751751f4d7708327927800752691dc2f1d49e83d6a055321dc4f07a91dc7a0f6f7eff4aea3239abc691ae6e4a1f9b29f779e36f3b4faff00f5f15971da4f291b7eef6c5747b55ef2ee3c7198b18ed85ed572de2109f980e7afbfb8fea3f1a6c08f4eb57857e6ad6650c30694003a52d48158168d8e7ea7dffda1fd47e3563af229194375edc8ed4a000001d0530168a28a407fffd2fa72a39466261ec6a4a42323158965139551728398d9b23d549e47f5a7a930b948c6e4906f43d867ae4f61de9f6df708fa7f2150ec6daf660e08f9e2f4c039c1fa1e3e95c959724d545fd7fc3ff91b45dd72b2644dff0033720f53fdeff01edf9d583d299148258c4838cf51e87b8fc2a4aea4d357464d5b4661db59dfa6a1733dc188c3291b36eedff2f0339e3a7a56d0518191d29d4550828a28a4014514500145145007ffd3fa728aaeb776ad234492a33a7de50c091db91f5a7f9f19e87f435916456fc332ff009ea47f4a9268d9c2bc780e872b9e9ee0fb115144479cd8e8738e3d307fad5ba99c54972b1a76774520724dc5bae1b3fbd8bbe7fc7dfa11f9d5a8e449503a1c8351cb131613427120e39e8c3d0ff9e2a104926e2dc1dc0e2588f527fc7d0f423f035c7194a8cacf6febfa6be68d5a52572ed14c8e449503c6720d3ebb134d5d19356d18514514c414514500145145007fffd4fa26df4a82dee1ee14b3162e403db7b6e233e99f4c7be6aef9117f7454d456572ca61163b81b4601fea3ff00ad572aacf80eaffe7a8fe99ab54802a09212cc2589b6480633d411e8477153d432498caa9c63a9eb8cff00327b0a994149598d36b54570a657675fdccca403dd5bfc7f98a9e39f2de54a3649e9d8fb83de9bf67491712af1d87a7e3ebea6a29018d365d0f3611ceffe24f738f4f51cff003ae594654758edfd7f57fbcd5352d197a8aadb6e235dd1b09940c807ef11f51c1f6e2a58e449537a1c8fd41f43ef5d10aaa5a7521c6da92514515a10145145007fffd5fa728a28ac4b2b5cfdc07ebffa09a9c9f973ed50dcfdcfcfff00413529fb9f8531951259252c09dbb7d28b53bce4f6191f524827ea7151db7593e94fb2e87fdd1fcda8e822fd1451480a90fee6ecdb27fab29bc0f439c71eded49723c89639a3e0c8e1187620f7fa8f5a07fc84bfed8ffecd4b7fff002c3febb2ff005af35e89dba3fd4e8fb5f2fd0b7451457a473851451401ffd9c266ae7f";
        BinTreeNodeReader reader = new BinTreeNodeReader();
		byte[] b = BinHex.hex2bin(locationMessage);
        ProtocolNode node = reader.nextTree(b);
        log.debug(node.toString());
        ProtocolNode mediaNode = node.getChild(0);
        assertNotNull(mediaNode);
        assertEquals("location", mediaNode.getAttribute("type"));
        assertEquals("24.6995", mediaNode.getAttribute("longitude"));
        assertEquals("60.1674", mediaNode.getAttribute("latitude"));
        assertEquals("raw", mediaNode.getAttribute("encoding"));
	}

	@Test
	public void testParseVCard() throws Exception {
		String locationMessage = "000098f810593afaff063584077181089144ff071424659087a4128cc268c2a757a1ff05142486768666fc0c4b696d204c696e6462657267f801f80457a7ec60f801f804ec605ffc03416263fc49424547494e3a56434152440a56455253494f4e3a332e300a4e3a4162633b3b3b3b0a464e3a4162630a54454c3b747970653d574f524b3a38313538373239310a454e443a56434152446a69ae8a";
        BinTreeNodeReader reader = new BinTreeNodeReader();
		byte[] b = BinHex.hex2bin(locationMessage);
        ProtocolNode node = reader.nextTree(b);
        log.debug(node.toString());
        ProtocolNode mediaNode = node.getChild("media");
        assertNotNull(mediaNode);
        assertEquals("vcard", mediaNode.getAttribute("type"));
        ProtocolNode vcard = mediaNode.getChild("vcard");
        assertNotNull(vcard);
        assertEquals("Abc",vcard.getAttribute("name"));
        String hex = new String(vcard.getData());
        log.debug(hex);
        assertTrue("Work phone not found in VCard",hex.contains("TEL;type=WORK:81587291"));
	}

	@Test
	public void testParseImage() throws Exception {
		String locationMessage = "000992f80c593afaff063584077181089144ff071424659087a444a757a1ff05142486842266fc0c4b696d204c696e6462657267f801f81857a745ec6efc0742616e616e6173ec5afc06313834363631abfc7568747470733a2f2f6d6d693234302e77686174736170702e6e65742f642f6252716c4e566975703052773952764836594f67374654747845594142515f704344466945412f4168635649626966376154716a3879475f6e437a6c514c4e4471667052524e54777472744d6f5f76586a576b2e6a7067ec33fc304168635649626966376154716a3879475f6e437a6c514c4e4471667052524e54777472744d6f5f76586a576b2e6a70672b7e49fc0d3139382e31312e3231322e3236ec48ec0eec98fc2c3349376b57573953596a4e466e73696642474548425136545469355849744c4e503148774b43577a6653673dec63fc03393630ec3bfc0431323830fd00083cffd8ffe000104a46494600010100004800480000ffe100584578696600004d4d002a000000080002011200030000000100010000876900040000000100000026000000000003a00100030000000100010000a0020004000000010000004ba0030004000000010000006400000000ffed003850686f746f73686f7020332e30003842494d04040000000000003842494d0425000000000010d41d8cd98f00b204e9800998ecf8427effc00011080064004b03012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffdb0043000606060606060a06060a0e0a0a0a0e120e0e0e0e12171212121212171c1717171717171c1c1c1c1c1c1c1c22222222222227272727272c2c2c2c2c2c2c2c2c2cffdb0043010707070b0a0b130a0a132e1f1a1f2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2effdd00040005ffda000c03010002110311003f00ede115a68bc566c3dab6221902a5a2930f2e90c6075ab2df28cd616a178635383d2a25248a4ae3351d4ad6c22dce7739e1507526a96911dc6a971bee18e0738524019e838af3793507bdbe7958e429daa3f9d7b078453fd1c311cb727fa57818ec54e53e48bb23be952518f3334bfb363b4ca44b85625bf13c9ab115ae4f4ad5976bbe3d2a48a319af6f0379524d9c15dda4c75b5a81ce2b582a818c543180053cb0cd77a4733773ffd0ed206ce2b7a0195ae5ade6031934ebef11c762a2ded0096e5fa0eca3d5bfc3bd67566a0b9a45c22e4ec8eb261b5093c5709aedc086d269f3d14e2ba6d3217ba884b7ce646233cf4fc07415c878e6d638a38522cab4f2056c1c02a012722bc59665194f96da1db1c3b4b7380d3a0f950c87696651f52c6bde7428648e25911b08148db8ebe873db15e65e1db48ee6f50900ac7f30faf4af67b75090ed5f4af3653e69dce99e91b13c20eddcdd4f3cd5b43835581c0a707afabc347929c6278f55de4d9a024c0aaed71f31e6aabcb8159cd37cc6ba1c8cd44fffd1c5bbd79a3f950f353e841e794cf2fccec7249ae1236334e01e6bd37c3f0b0080e3d6bc4cc6ab7ee9e8e1e092b9e836824ca953818008c7615c7f8bae56eb528edb39114649fab703fad76d091040646ea066bc7e0bb6d4efef6fc9f95a731a7d1063f9e6bc5b3777d8eb8bd4ed3c2f6bb1fcd1c28f9715e98d9288a38e466b90f0e4205baf1d793f8d75ca54cc307fc8a7875cd35e64577b93b1c5465f8a243cd5666e2bec533c5b0aefc567b39dc6a591b8aa0cdf31a1b1a3ffd2f2fb105ae457b4787a21b17dabc7b4900dd73eb5edba0c4a230477af9bc7bf7cf5a9fc28d7d5a468f4f754fbcdf28fc6bc77c323fe25a0facb213ff7d1af65d45371850f46702bc7b40468ade5b73ff2ca7914fe75c697ee64fccb8bf7ede47b2e89c5ba0cf6ae82024bf2a1793d39c8f5fc6b9bd11ff72a0fa56f5b14370c40c11dfd723ffad5382fe247d5135f664f29e6aa3354f31e6a8bb715f5899e491c8dc55166e6a691b8aa45b9a4d9491fffd3f38d2b0b3827d6bdc3c3e418c015e1960db65af69f0fcdc2806be67315699ebd1d62749aaa95b613af26360ff97ffaabcbe5b7167aedf42bf7272b711fbeee1bf5af657856e2068cff0010af24d5c1b2bb8d2eb8311211fb143d54fd3b572509734654babd50de8d48ecb429b31804f4c8adf4674bbce70a40c2fd3ffad5c2e9738864c03c1e4575e92f9803a8248fe958d17cb2d0aa88d89cd673b5589a518eb59ecf5f5746a29c5491e4ce36762295aa916e6a691aaa1356c11fffd4f30849570c2bd27c3f740801b903b579e22157c1ae8ac5a4b52274e507de1e9ef5e3e3e839c6e8efc3d4b68cf79b1b95950550d7744b7d5a064900c9e9ebff00ebae7f48d511d061bad74d25d8d80e791d08af9c7169f99dd63cb3ec7aa684fe54c8d3db03f2ba8f9d3ea3b8adcb5d7ede24cf9831fafe55d7a6a56d2b14b800fe154750f0f687a9465d9361ebb90ed35bc25172bd55f7112ba5646647ace9f7e3c9338ddd786c303ed5cf0d764d27541a7cf23dddbcce02c840df1b31c0071f7867f2ad31e1ff000ed8be52dccf276dd963f9564a6977f737cb7b040b6e226054c9fc433cfcbd4607d2bd5c1b6a7fbb6f94e5aaa36f7b73b47279aac5b9a9e4e954c9e6bd46ce448fffd5e2e48d01ce2b774b0381d8d634bd6b6b4bea2b9ea9ac0bac3ec57412dfe552338ec2ba7b3b995d02b1c835ccde7fc7e2ff00ba2b7ec7ee8af98c5ab5467a94fe146b2a20fde00334f9679151829c520fb9514ff71aa22122c428aaa58753d4d2b1a58bee52357d3415a2923cb7b95e43c554ab5274aab4328fffd9a0d54057";
        BinTreeNodeReader reader = new BinTreeNodeReader();
		byte[] b = BinHex.hex2bin(locationMessage);
        ProtocolNode node = reader.nextTree(b);
        log.debug(node.toString());
        ProtocolNode mediaNode = node.getChild("media");
        assertNotNull(mediaNode);
        assertEquals("image", mediaNode.getAttribute("type"));
        assertEquals("Bananas",mediaNode.getAttribute("caption"));
	}

	@Test
	public void testParseVideo() throws Exception {
		String locationMessage = "000946f80c593afaff063584077181089144ff071424659087a463a757a1ff05142486890266fc0c4b696d204c696e6462657267f801f82a57abfc7568747470733a2f2f6d6d693230342e77686174736170702e6e65742f642f764a4b37623471374f687934416366544e36336c2d5654747869594142515f704a4d544441772f41703134644775644f726b766232376c4a6b4f305956484f455a2d426e3078327666747a35364564786c50392e6d7034a7ec62ec6efc0f5a6f6f6d696e672062616e616e617392fc0133ec33fc3041703134644775644f726b766232376c4a6b4f305956484f455a2d426e3078327666747a35364564786c50392e6d70342b7eec5afc0633333938363249fc0e3139382e31312e3231372e323030ec48ec12ec98fc2c674d6c31455831694b31306f4a482f4338776e525072682b6c304f31334735736b46555342504a7a654a773dec31fc0134ec61eaec63fc03343830ec3bfc03333630ec34fc023330ec5ffc03373036ec27fc03616163ec2afc053434313030ec29dfec26fc023633fd0007b5ffd8ffe000104a46494600010100004800480000ffe100584578696600004d4d002a000000080002011200030000000100010000876900040000000100000026000000000003a00100030000000100010000a0020004000000010000004ba0030004000000010000006400000000ffed003850686f746f73686f7020332e30003842494d04040000000000003842494d0425000000000010d41d8cd98f00b204e9800998ecf8427effc00011080064004b03012200021101031101ffc4001f0000010501010101010100000000000000000102030405060708090a0bffc400b5100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9faffc4001f0100030101010101010101010000000000000102030405060708090a0bffc400b51100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffdb0043000606060606060a06060a0e0a0a0a0e120e0e0e0e12171212121212171c1717171717171c1c1c1c1c1c1c1c22222222222227272727272c2c2c2c2c2c2c2c2c2cffdb0043010707070b0a0b130a0a132e1f1a1f2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2effdd00040005ffda000c03010002110311003f00db79302b26f2f7ca42735d1c1a5bceb976c7b0aa7a9787a19adda31947c7cad9efee2b96a665453b2674c30f2dcf399efccae49354d7f78e646e82aade5adcd8df3594f8dc30723a107bd5eb7884ecb6f8e18e2b931334d2b1d5463d4ec3c3a04b6d0b468db6562738ec3d7eb5ec5a5dba45995546e60013df8e95c568b6cb18445180a0002bd0edc6d8eb820ef2760aaf42dc19690b1f5c7d715ae98ac6b56c9c8e9cfe75ac86bdbc046d0e6ee705796b62e20153d5643536eaef6739ffd0f43b2b88fca041eb53de80d1ee3dab9db3f3d58231054743d3f0c55bd46efcab66c9ec6be5a71563d65b9e33addc79baccf2b748c051573441baed59fa8fe758cec2e659676e43c84fe5c0ae8b44b7dd2894f453fad6ade96344b43d5f4953c1aed232238fe66fc4d723a460019ae99f7b6c0a015ea41fc3f954c5d91cf3dcd180e2b491ab1a26ad046e2be930f1e5a71479b377936682bd49bea887a76f35bdccec7fffd1eca18c84e6b8ff00176a1f65b19083d881f535dabe5109f4af19f1b5e196f2dec14f324809fa035f2f4fde99eb333204290a2fa015dd6850b792bee735c6aaf38af43d1e207cb520fca01fce9c99acb63bbd357626fc722b7a39372061dc67f3acbb31b63fa569c0aa782a14827f5e73f8d28fbcd239a4fa96e2e055c46e2ab28c1c54c3815f5099e5936fa37d419a4dd45c2c7fffd2ee6f7090135f3aeab3fdafc5aa3b479fe46be82d64badab1538c0af9b2d98cbe22690f52cffcabe6f0aaea52f23d59743b085434bc7ae0d7a5698a032a7a006bcfad53332fd457a769ea3e5205734e5637923a78214976ef1ca1dc0fbfa8ad7b550b3a83cb3719c75c67ad643c104d0edb83844f9c9c918c77c8ad9b27596e14ab03804f1e84715a50779c7d51cb5168cbc57068cd48e306a1638afa54cf36c216a6eea6b1a6e69b63b1ffd3ebf5be2ce43d3835f35d8646ac1bbef61f9e6be9cd6137dab81e95f3446861d5181e36cbfd6be7305ac648f56a68d33bdb3e6553ee2bd434cdae3e5e70707ea2bcced462507debd4f4c1c29f5ae0aace96b43a344057079fad5eb058cce9321cee0791dfdbf0ed551437423e50320fbd3ac1a3862458c92236239ebd6ae8cecd4bb339e71ba68df905547e2adc9cd5392bea22cf31a2bb1a8f750c6a2cd536163fffd4f43bd5df01006735f396bb6c6cf5c7078121c8fad7d27b3744541af1ff001be8c66533c0a77447ae2be57095392a599ec4e378956c9b7aa38ee057a7e8ec1e28c9e48af19f0ddf8b9536efc489dabd5f4395d5023e09ac7190e59346d07cd1b9dfaee31fc98cfbd55b3816179147f1b173f5353c0f95151fdd6f373c0241ac69cba1323751c98c67af4a8243446c7cb19a8a47e2be8f075b9e9aee8f3aac2ccaec79a8e958d479aec31b1fffd5f4b809c565eaf0452a14719041ad383eed51d4fa1fa57c5cf73db89f396a8a34bd76396cfe525b9f4eb8af65b062b2295ef5e39e24ff0090c47fef7f5af61b2ff589f856f8cf820fc8aa5bc8ededddb039ab82472e14f20a9e2a85bf4156d7fd6aff00ba7fa571d2dc72356dff00d481d8123f004d72eb7f722678b208566033ed5d45bffaaff8137f335c58ff008fa93fdf6fe66bd9cb3e297c8e2c47436eda7926843be33ed5264d55b0ff008f61566bd8394fffd99f6247f8";
        BinTreeNodeReader reader = new BinTreeNodeReader();
		byte[] b = BinHex.hex2bin(locationMessage);
        ProtocolNode node = reader.nextTree(b);
        log.debug(node.toString());
        ProtocolNode mediaNode = node.getChild("media");
        assertNotNull(mediaNode);
        assertEquals("video", mediaNode.getAttribute("type"));
        assertEquals("Zooming bananas",mediaNode.getAttribute("caption"));
	}

	@Test
	public void testParseGroupMessage() throws Exception {
		String locationMessage = "000053f80e593afaff8c358407718108a1425885276f3b44ff871425871882a81f6ffaff0635840771810891a7a2a1ff05142589700066fc0c4b696d204c696e6462657267f801f80212fc06746a6f686f6fc15a0e1300";
        BinTreeNodeReader reader = new BinTreeNodeReader();
		byte[] b = BinHex.hex2bin(locationMessage);
        ProtocolNode node = reader.nextTree(b);
        log.debug(node.toString());
        assertEquals("358407718108-1425885276@g.us", node.getAttribute("from"));
	}
}
